#include <iostream>
#include <cstring>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>

#define PORT 65432
#define BUFFER_SIZE 1024

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[BUFFER_SIZE] = {0};

    // 创建Socket文件描述符
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket创建失败");
        exit(EXIT_FAILURE);
    }

    // 设置Socket选项
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("设置Socket选项失败");
        exit(EXIT_FAILURE);
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY; // 监听所有IP
    address.sin_port = htons(PORT);

    // 绑定Socket到地址和端口
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("绑定失败");
        exit(EXIT_FAILURE);
    }

    // 开始监听
    if (listen(server_fd, 3) < 0) {
        perror("监听失败");
        exit(EXIT_FAILURE);
    }

    std::cout << "服务器已启动，等待客户端连接..." << std::endl;

    // 接收客户端连接
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen)) < 0) {
        perror("接受连接失败");
        exit(EXIT_FAILURE);
    }

    std::cout << "客户端已连接" << std::endl;

    while (true) {
        memset(buffer, 0, BUFFER_SIZE);
        int valread = read(new_socket, buffer, BUFFER_SIZE);
        if (valread <= 0) {
            std::cout << "客户端断开连接" << std::endl;
            break;
        }

        std::cout << "收到客户端消息: " << buffer << std::endl;

        // 应答消息
        std::string response = "服务器已收到: ";
        response += buffer;
        send(new_socket, response.c_str(), response.length(), 0);
    }

    close(new_socket);
    close(server_fd);

    return 0;
}
